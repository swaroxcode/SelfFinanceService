@page "/reports"
@using BlazorApp2.Services
@using ConsoleApp1.DAL.Entity
@inject IReportService ReportService
<PageTitle>Report</PageTitle>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Daily Report">
        <MudTextField T="DateTime" Label="Date of Operation" Required="true" RequiredError="Date of operations is requiered " @bind-Value="neededDate"Format="dd/MM/yyyy"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@DailyReport" Class="ml-auto">Show Daily Report</MudButton>
        @if (showContext)
        {
            <MudTable Items="@ListOfCurrentOperations" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Type Id</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Date of Operation</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Type Id">@context.TypeId</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount</MudTd>
                    <MudTd DataLabel="Date of Operation">@context.DateOfOperations</MudTd>
                </RowTemplate>
            </MudTable>
            <p>Total Expence: @TotalExpence</p>
            <p>Total Income: @TotalIncome</p>
        }
    </MudTabPanel>
    <MudTabPanel Text="Custom Report">
        <MudTextField T="DateTime" Label="Start Date of Operation" Required="true" RequiredError="Date of operations is requiered " @bind-Value="startDate" Format="dd/MM/yyyy"/>
        <MudTextField T="DateTime" Label="End Date of Operation" Required="true" RequiredError="Date of operations is requiered " @bind-Value="endDate" Format="dd/MM/yyyy"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CustomReport" Class="ml-auto">Show Daily Report</MudButton>
        @if (showContext)
        {
            <MudTable Items="@ListOfCurrentOperations" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Type Id</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Date of Operation</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Type Id">@context.TypeId</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount</MudTd>
                    <MudTd DataLabel="Date of Operation">@context.DateOfOperations</MudTd>
                </RowTemplate>
            </MudTable>
            <p>Total Expence: @TotalExpence</p>
            <p>Total Income: @TotalIncome</p>
        }
    </MudTabPanel>
</MudTabs>

@code {
    private bool showContext;
    private DateTime neededDate { get; set; }
    private DateTime startDate { get; set; }
    private DateTime endDate { get; set; }
    private decimal? TotalIncome { get; set; }
    private decimal? TotalExpence { get; set; }
    private List<Operation>? ListOfCurrentOperations { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    private async Task DailyReport()
    {
        var dailyReport = await ReportService.DailyReport(neededDate);
        if (dailyReport != null)
        {
            TotalExpence = dailyReport.TotalExpence;
            TotalIncome = dailyReport.TotalIncome;
            ListOfCurrentOperations = dailyReport.ListOfCurrentOperations;
            showContext = true;
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is present or Error");
        }
    }

    private async Task CustomReport()
    {
        var dailyReport = await ReportService.DatePeriodReport(startDate, endDate);
        if (dailyReport != null)
        {
            TotalExpence = dailyReport.TotalExpence;
            TotalIncome = dailyReport.TotalIncome;
            ListOfCurrentOperations = dailyReport.ListOfCurrentOperations;
            showContext = true;
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is present or Error");
        }
    }

}