@page "/types"
@using BlazorApp2.Services
@using Type = ConsoleApp1.DAL.Entity
@inject ITypeServices TypeServices
@inject IDialogService DialogService

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Create">
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField T="string" Label="Type Name" Required="true" RequiredError="Type name is required!" @bind-Value="TypeName"/>
            <div class="d-flex">
                <MudRadioGroup T="string" Required="true" RequiredError="Types type is required!" @bind-Value="_expenceOrIncome">
                    <MudRadio Option="@("Expence")">Expence</MudRadio>
                    <MudRadio Option="@("Income")">Income</MudRadio>
                </MudRadioGroup>
            </div>
            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CreateNewType" Class="ml-auto">Register</MudButton>
            </div>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Tab Two">
        <MudTable Items="@_allTypes" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>TypeName</MudTh>
                <MudTh>Expence or Income</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Id">@context.TypeName</MudTd>
                <MudTd DataLabel="Id">@context.ExpenceOrIncome</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Update">
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField T="string" Label="New Type Name" Required="true" RequiredError="Type name is required!" @bind-Value="TypeName"/>
            <MudTextField T="Guid" Label="Enter current Id" Required="true" RequiredError="Id is required!" @bind-Value="Id"/>
            <div class="d-flex">
                <MudRadioGroup T="string" Required="true" RequiredError="Types type is required!" @bind-Value="_expenceOrIncome">
                    <MudRadio Option="@("Expence")">Expence</MudRadio>
                    <MudRadio Option="@("Income")">Income</MudRadio>
                </MudRadioGroup>
            </div>
            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@UpdateType" Class="ml-auto">Register</MudButton>
            </div>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Remove">
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField T="Guid" Label="Enter current Id" Required="true" RequiredError="Id is required!" @bind-Value="Id"/>
            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@RemoveType" Class="ml-auto">Remove</MudButton>
            </div>
        </MudForm>
    </MudTabPanel>
</MudTabs>


@code {
    MudForm form;
    bool success;
    private string TypeName { get; set; }
    private string _expenceOrIncome { get; set; }
    private Guid Id { get; set; }
    private List<Type.Type>? _allTypes;
   
    string state = "Something wrong";

    protected override async Task OnInitializedAsync()
    {
        _allTypes = await TypeServices.GetAll();
    }

    public async Task CreateNewType()
    {
        var result = await TypeServices.CreateNewType(TypeName, _expenceOrIncome);
        if (result is true)
        {
            await DialogService.ShowMessageBox("Result", "Element is Added");
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is present or Error");
        }
    }

    public async Task UpdateType()
    {
        var result = await TypeServices.UpdateType(Id, TypeName, _expenceOrIncome);
        if (result is true)
        {
            await DialogService.ShowMessageBox("Result", "Element is Updated");
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is wrong or Error");
        }
    }

    public async Task RemoveType()
    {
        var result = await TypeServices.RemoveType(Id);
        if (result is true)
        {
            await DialogService.ShowMessageBox("Result", "Element is Removed");
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is wrong or has Operations(Please remove Operations than remove type)");
        }
    }

}