@page "/operations"
@using BlazorApp2.Services
@using BlazorApp2.DTO
@using Type = BlazorApp2.DAL.Entity.Type
@inject ITypeServices TypeService
@inject IOperationServices OperationService
@inject IDialogService DialogService


<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Remove">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                          <MudSelect T="Guid" Label="Id" AnchorOrigin="Origin.BottomCenter" bind-Value="Id"ValueChanged="HandleValueChanged">
                               @foreach (var operation in _allOperations)
                               {
                                   <MudSelectItem Value= "@operation.Id"/>
                               }
                           </MudSelect>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@RemoveOperation" Class="ml-auto">Remove</MudButton>
                </div>
            </MudForm>
        </MudTabPanel>
    <MudTabPanel Text="Create">
        <MudForm @ref="_form" @bind-IsValid="@_success">
            <MudDatePicker Label="Set Date of Operation" @bind-Date="DateOfOperation"/>
            <MudTextField T="decimal" Label="Amount" Required="true" RequiredError="Amount of operations is requiered " @bind-Value="Amount"/>
            <MudSelect T="Guid" Label="Type Id" AnchorOrigin="Origin.BottomCenter" bind-Value="TypeId"ValueChanged="HandleValueChangedType">
                @foreach (Type type in _allTypes)
                {
                    <MudSelectItem Value= "@type.Id"/>
                }
            </MudSelect>
            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CreateNewOperation" Class="ml-auto">Create</MudButton>
            </div>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Update">
        <MudForm @ref="_form" @bind-IsValid="@_success">
                          <MudSelect T="Guid" Label="Id" AnchorOrigin="Origin.BottomCenter" bind-Value="Id"ValueChanged="HandleValueChanged">
                               @foreach (var operation in _allOperations)
                               {
                                   <MudSelectItem Value= "@operation.Id"/>
                               }
                           </MudSelect>
            <MudDatePicker Label="Set Date of Operations" @bind-Date="DateOfOperation"/>
            <MudTextField T="decimal" Label="Amount" Required="true" RequiredError="Amount of operations is requiered " @bind-Value="Amount"/>
                       <MudSelect T="Guid" Label="Type Id" AnchorOrigin="Origin.BottomCenter" bind-Value="TypeId"ValueChanged="HandleValueChangedType">
                           @foreach (var type in _allTypes)
                           {
                               <MudSelectItem Value= "@type.Id"/>
                           }
                       </MudSelect>
            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@UpdateOperation" Class="ml-auto">Update</MudButton>
            </div>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Get Opertaion">
        <MudForm @ref="_form" @bind-IsValid="@_success">
                                     <MudSelect T="Guid" Label="Id" AnchorOrigin="Origin.BottomCenter" bind-Value="Id" ValueChanged="HandleValueChanged">
                                          @foreach (var operation  in _allOperations)
                                          {
                                              <MudSelectItem Value="@operation.Id">@operation.Id</MudSelectItem>
                                          }
                                          
                                      </MudSelect>
            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@GetNeededOperation" Class="ml-auto">Search</MudButton>
                <MudContainer>
                    <MudPaper>
                        <div>
                            <h3>Person Details</h3>
                            @if (_showDetails)
                            {
                                <p>Type Name: @CurrentOperation.TypeName</p>
                                <p>Amount: @CurrentOperation.Amount</p>
                                <p>DateTime: @CurrentOperation.DateOfOperations</p>
                            }
                        </div>
                    </MudPaper>
                </MudContainer>
            </div>
        </MudForm>
    </MudTabPanel>
       <MudTabPanel Text="Get All">
            <MudTable Items="@_allOperations" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info"SortLabel="Sort By">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<OperationToShowDTO, object>(x=>x.TypeName)">Type Name</MudTableSortLabel></MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Date of Operation</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Type Name">@context.TypeName</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount</MudTd>
                    <MudTd DataLabel="Date Of Operation">@context.DateOfOperations</MudTd>
                </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 1000, 2000, 5000, 100000 }" />
                    </PagerContent>
            </MudTable>
        </MudTabPanel>
</MudTabs>


@code {
    
    MudForm _form;
    private List<Type> _allTypes = new();
    private List<OperationToShowDTO> _allOperations =new();
    bool _success;
    private DateTime? DateOfOperation { get; set; }
    private decimal Amount { get; set; }
    private Guid Id { get; set; }
    private string TypeName { get; set; }
    private Guid TypeId { get; set; }
    private OperationToShowDTO CurrentOperation { get; set; }
    private string _state = "Something wrong";
    private bool _showDetails;

    protected override async Task OnParametersSetAsync()
    {
        _allTypes = await TypeService.GetAll();
        _allOperations = await OperationService.GetAll();
    }
    
    public async Task CreateNewOperation()
    {
        var result = await OperationService.CreateNewOperation(TypeId, DateOfOperation, Amount);
        if (result is true)
        {
            await DialogService.ShowMessageBox("Result", "Element is Added");
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is present or Error");
        }
    }

    public async Task UpdateOperation()
    {
        var result = await OperationService.UpdateOperation(Id, TypeId, DateOfOperation, Amount);
        if (result is true)
        {
            await DialogService.ShowMessageBox("Result", "Element is Updated");
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is wrong or Error");
        }
    }

    public async Task RemoveOperation()
    {
        var result = await OperationService.RemoveOperation(Id);
        if (result is true)
        {
            await DialogService.ShowMessageBox("Result", "Element is Removed");
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is wrong or has Operations(Please remove Operations than remove type)");
        }
    }

    public async Task GetNeededOperation()
    {
        CurrentOperation = await OperationService.GetSomeOperation(Id);
        if (CurrentOperation != null)
        {
            TypeName = CurrentOperation.TypeName;
            Amount = CurrentOperation.Amount;
            DateOfOperation = CurrentOperation.DateOfOperations;
            _showDetails = true;
        }
        else
        {
            await DialogService.ShowMessageBox("Result", "Element is wrong or has Operations(Please remove Operations than remove type)");
        }
        
        
    }
    private void HandleValueChanged(Guid value)
    {
        Id = value;
    }
    private void HandleValueChangedType(Guid value)
    {
        TypeId = value;
    }
}